{"version":3,"sources":["Video/video.mp4","api.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","socket","openSocket","uuidv1","require","aggregateLatency","App","props","_this","cb","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","initSocket","io","on","console","log","setInterval","emit","Date","getTime","state","uuid","getClientLatency","uid","latencyObj","latencyValues","values","highestLatency","Math","max","apply","toConsumableArray","playVid","vid","document","getElementById","ontimeupdate","innerHTML","currentTime","checked","setTimeout","setState","playState","playTime","pauseVid","playAsync","play","pauseAsync","pause","curPlayTime","updatePlayhead","that","assertThisInitialized","playMode","latencyDelay","videosrc","time","timer","timerFunc","handleLatencyChange","bind","playFunc","subscribeToTimer","curPlayState","_this2","playPromise","undefined","then","_","catch","error","react_default","a","createElement","className","id","height","onTimeUpdate","src","seeking","controls","preload","onClick","react_switch_default","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9be26303.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/video.b220a35d.mp4\";","import openSocket from 'socket.io-client';\nconst  socket = openSocket('https://shielded-sea-84002.herokuapp.com');\n// const  socket = openSocket('http://localhost:8000');\nfunction subscribeToTimer(cb) {\n  socket.on('playController', playFunc => cb(playFunc));\n  // socket.emit('subscribeToTimer', \"Inital\", \"Hello\")\n}\n\nfunction timer(cb) {\n  socket.on('setTimer', timerFunc => cb(timerFunc));\n  // socket.emit('subscribeToTimer', \"Inital\", 0)\n}\n\n\nexport {subscribeToTimer, timer};","import React, { Component } from 'react';\nimport './App.css';\nimport { subscribeToTimer, timer } from './api';\nimport {video} from \"./Video/video.mp4\"\nimport { Socket } from 'dgram';\nimport Switch from \"react-switch\";\nimport io from 'socket.io-client'\nimport openSocket from 'socket.io-client';\nconst uuidv1 = require('uuid/v1');\n\n// const  socket = openSocket('http://localhost:8000');\nconst  socket = openSocket('https://shielded-sea-84002.herokuapp.com');\n// const  socket = \"/\"\nlet aggregateLatency=0; \nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playTime: 10,\n      playMode: \"sync\",\n      latencyObj: {},\n      curPlayTime: 0,\n      latencyDelay: 0,\n      checked: true,\n      videosrc: \"https://media.w3.org/2010/05/sintel/trailer_hd.mp4\"\n    };\n    timer((time) => \n    this.setState({ \n      timer: time,\n    }));\n    this.handleLatencyChange = this.handleLatencyChange.bind(this);\n    subscribeToTimer((playState) => \n    this.setState({ \n      playState: playState.curPlayState,\n      curPlayTime: playState.curPlayTime,\n      latencyObj: playState.latencyObj\n    }));\n  }\n\n  componentWillMount(){\n    this.setState({uuid: uuidv1()})\n    // socket.emit('subscribeToTimer', \"sdfasdf\", this.state.curPlayTime)\n    this.initSocket()\n    \n    setInterval(() => {\n      this.getClientLatency()\n    }, 2000);\n  }\n\n  initSocket=()=>{\n    const socket = io(socket)\n    socket.on('connect', () => {\n      console.log('connected')\n      // socket.emit('subscribeToTimer', \"Play\", this.state.playTime)\n      setInterval(() => {\n        socket.emit('timer', new Date().getTime(), this.state.uuid)\n        \n      }, 2000);\n    })\n  }\n\n  \n\n\n  componentDidUpdate() {\n   \n    let vid = document.getElementById(\"myVideo\");\n    if(this.state.playState===\"Play\"){\n\n        // Show loading animation.\n        var playPromise = vid.play();\n\n        if (playPromise !== undefined) {\n          playPromise.then(_ => {\n            vid.play()\n          })\n          .catch(error => {\n            vid.pause()\n          });\n        }\n    }else{\n      vid.pause()\n    }\n    vid.currentTime=this.state.curPlayTime\n  }\n\n  handleLatencyChange(checked) {\n    this.setState({ checked });\n  }\n\ngetClientLatency=()=>{\n    let uid= this.state.uuid\n    let latencyObj= this.state.latencyObj\n    if(latencyObj !== {}){\n      let latencyValues=Object.values(latencyObj)\n      let highestLatency=Math.max(...latencyValues)\n      console.log(latencyValues)\n      // console.log(highestLatency)\n      aggregateLatency= highestLatency-latencyObj[uid]\n      //if(aggregateLatency<2){\n        //console.log(\"aggregatedLatency\", aggregateLatency)\n      // this.setState({latencyDelay: aggregateLatency})\n      //}\n      \n    }\n  }\n\n  playVid=()=>{\n     \n      //console.log(\"called\")\n      //this.setState({playState: \"Play\"})\n      let vid = document.getElementById(\"myVideo\"); \n      vid.ontimeupdate = function() {\n        document.getElementById(\"demo\").innerHTML = vid.currentTime;\n        //console.log(vid.currentTime)\n      };\n      \n\n      if(this.state.checked){\n        console.log(\"Dynamic Latency Adjustment: \", aggregateLatency)\n        //Auto Correct Latency\n        setTimeout(() => {\n          this.setState({\n            playState: \"Play\",\n            playTime: vid.currentTime\n          }, ()=> { \n            // alert(this.state.playTime)\n            socket.emit('subscribeToTimer', \"Play\", this.state.playTime)\n          })\n\n        }, aggregateLatency)\n        \n      }else{\n        this.setState({\n          playState: \"Play\",\n          playTime: vid.currentTime\n        }, ()=> { \n          // alert(this.state.playTime)\n          socket.emit('subscribeToTimer', \"Play\", this.state.playTime)\n\n        })\n\n      }\n      \n\n      \n  }\n\n  pauseVid=()=>{\n    let vid = document.getElementById(\"myVideo\"); \n    \n    vid.ontimeupdate = function() {\n      document.getElementById(\"demo\").innerHTML = vid.currentTime;\n      //console.log(vid.currentTime)\n    };\n    this.setState({\n      playState: \"Pause\",\n      playTime: vid.currentTime\n    }, ()=> {\n      this.getClientLatency()\n      socket.emit('subscribeToTimer', \"Pause\", this.state.playTime)\n     })\n  }\n\n\nplayAsync=()=>{\n      \n    let vid = document.getElementById(\"myVideo\"); \n    this.setState({\n      playState: \"Play\",\n    })\n    vid.ontimeupdate = function() {\n      \n      document.getElementById(\"demo\").innerHTML = vid.currentTime;\n      vid.play()\n    };\n  \n}\n\npauseAsync=()=>{\n\n  let vid = document.getElementById(\"myVideo\"); \n  vid.ontimeupdate = function() {\n    document.getElementById(\"demo\").innerHTML = vid.currentTime;\n    vid.pause()\n  };\n  this.setState({\n    playState: \"Pause\",\n    curPlayTime: vid.currentTime,\n})\n}\n\n  updatePlayhead=()=>{\n      let that = this\n      let vid = document.getElementById(\"myVideo\");\n      if(this.state.playState===\"Pause\" && this.state.playMode===\"sync\" && this.state.curPlayTime !== vid.currentTime){  \n          console.log(\"update\", vid.currentTime);\n          that.setState({\n            playTime: vid.currentTime\n          }, ()=> {\n            console.log(\"madeit\", this.state.playTime)\n            socket.emit('subscribeToTimer', \"Pause\", that.state.playTime)\n           })\n        };\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"videoSycnWrapper\">\n         <h1>Synchronized Video Viewing</h1>\n         <div className=\"videoWrapper\">\n          <video id=\"myVideo\" height=\"300px\" onTimeUpdate={this.updatePlayhead} src={this.state.videosrc} seeking=\"true\"controls preload=\"auto\"></video>\n         </div>\n       \n        Play State: {this.state.playState}\n        <button onClick={this.playVid}>Sync Play</button>\n        <button id=\"SyncPause\" onClick={this.pauseVid}>Sync Pause</button>\n        <button onClick={this.playAsync}>Async Play</button>\n        <button onClick={this.pauseAsync}>Async Pause</button>\n\n        <p>Client Video Timecode: <span id=\"demo\"></span></p>\n        From sever PlayState: {this.state.playState}\n        From sever curPlayTime: {this.state.curPlayTime}\n        <Switch onChange={this.handleLatencyChange} checked={this.state.checked} />\n        Timer: {this.state.time}\n        UUID: {this.state.uuid}\n        Aggregated Latency: {this.state.latencyDelay}\n        {/* latencyTest: {this.state.latencyTest} */}\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport io from 'socket.io-client'\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}