{"version":3,"sources":["Video/video.mp4","api.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","socket","openSocket","uuidv1","require","numClients","aggregateLatency","App","props","_this","cb","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","initSocket","io","on","console","log","setInterval","emit","Date","getTime","state","uuid","enterViewing","setState","getClientLatency","latencyValues","uid","latencyObj","values","length","highestLatency","Math","max","apply","toConsumableArray","playVid","vid","document","getElementById","ontimeupdate","innerHTML","currentTime","playState","playTime","pauseVid","playAsync","play","pauseAsync","pause","curPlayTime","updatePlayhead","that","assertThisInitialized","syncMode","latencyDelay","checked","videosrc","time","timer","timerFunc","handleLatencyChange","bind","toggleSyncMode","playFunc","subscribeToTimer","curPlayState","setTimeout","react_default","a","createElement","className","onClick","id","height","onTimeUpdate","src","seeking","controls","preload","react_switch_default","onChange","onColor","checkedIcon","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e1c97564.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/video.b220a35d.mp4\";","import openSocket from 'socket.io-client';\n// const  socket = openSocket('https://limitless-lake-54723.herokuapp.com');\nconst  socket = openSocket('http://localhost:8000');\nfunction subscribeToTimer(cb) {\n  socket.on('playController', playFunc => cb(playFunc));\n  // socket.emit('subscribeToTimer', \"Inital\", \"Hello\")\n}\n\nfunction timer(cb) {\n  socket.on('setTimer', timerFunc => cb(timerFunc));\n  // socket.emit('subscribeToTimer', \"Inital\", 0)\n}\n\n\nexport {subscribeToTimer, timer};","import React, { Component } from 'react';\nimport './App.css';\nimport { subscribeToTimer, timer } from './api';\nimport {video} from \"./Video/video.mp4\"\nimport { Socket } from 'dgram';\nimport Switch from \"react-switch\";\nimport io from 'socket.io-client'\nimport openSocket from 'socket.io-client';\nconst uuidv1 = require('uuid/v1');\nlet numClients=1;\nconst  socket = openSocket('http://localhost:8000');\n// const  socket = openSocket('https://limitless-lake-54723.herokuapp.com');\n// const  socket = \"/\"\nlet aggregateLatency=0; \nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playTime: 10,\n      syncMode: true,\n      playState: \"Pause\",\n      latencyObj: {},\n      curPlayTime: 0,\n      latencyDelay: 0,\n      enterViewing: false,\n      checked: false,\n      videosrc: \"https://firebasestorage.googleapis.com/v0/b/elevaetbackend.appspot.com/o/Test%2FMSF19087_Workplace_Vertilcals_YIR_v05.mp4?alt=media&token=5d72233a-ca4f-41d2-a692-118f845ae743\"\n    };\n    timer((time) => \n    this.setState({ \n      timer: time,\n    }));\n    this.handleLatencyChange = this.handleLatencyChange.bind(this);\n    this.toggleSyncMode = this.toggleSyncMode.bind(this);\n    subscribeToTimer((playState) => \n    this.setState({ \n      playState: playState.curPlayState,\n      curPlayTime: playState.curPlayTime,\n      latencyObj: playState.latencyObj\n    }));\n  }\n\n  componentWillMount(){\n    this.setState({uuid: uuidv1()})\n    // socket.emit('subscribeToTimer', \"sdfasdf\", this.state.curPlayTime)\n    this.initSocket()\n    \n  }\n\n  initSocket=()=>{\n    const socket = io(socket)\n    socket.on('connect', () => {\n      console.log('connected')\n      // socket.emit('subscribeToTimer', \"Play\", this.state.playTime)\n      setInterval(() => {\n        socket.emit('timer', new Date().getTime(), this.state.uuid)\n      }, 2000);\n    })\n  }\n\n  \n\n\n  componentDidUpdate() {\n   \n    let vid = document.getElementById(\"myVideo\");\n    if(this.state.playState===\"Play\"){\n      socket.emit('timer', new Date().getTime(), this.state.uuid)\n      if(this.state.checked){\n        setTimeout(()=>{\n          vid.play();\n        },aggregateLatency)\n      }else{\n        vid.play();\n      }\n        \n    }else{\n      socket.emit('timer', new Date().getTime(), this.state.uuid)\n      vid.pause()\n    }\n    vid.currentTime=this.state.curPlayTime\n  }\n\n  handleLatencyChange(checked) {\n    this.setState({ checked });\n  }\n\n  toggleSyncMode() {\n    console.log(\"toggleSyncMode\")\n    this.setState({ \n      syncMode: !this.state.syncMode\n     });\n  }\n\n  enterViewing=()=>{\n    console.log(\"asdfasdfasdf\")\n    this.setState({ \n      enterViewing: true\n     });\n  }\n\ngetClientLatency=()=>{\n    let latencyValues={}\n    let uid= this.state.uuid\n    let latencyObj= this.state.latencyObj\n    if(latencyObj !== {}){\n      latencyValues=Object.values(latencyObj)\n      numClients=latencyValues.length\n      let highestLatency=Math.max(...latencyValues)\n      \n      console.log(latencyValues)\n      // console.log(highestLatency)\n\n      if(latencyObj[uid]>0){\n        aggregateLatency= highestLatency-latencyObj[uid]\n      }else{\n        aggregateLatency= 0\n      }\n      \n    }\n  }\n\n  playVid=()=>{  \n      //console.log(\"called\")\n      this.getClientLatency()\n      //this.setState({playState: \"Play\"})\n      let vid = document.getElementById(\"myVideo\"); \n      vid.ontimeupdate = function() {\n        document.getElementById(\"demo\").innerHTML = vid.currentTime;\n        //console.log(vid.currentTime)\n      };\n      \n        console.log(\"Dynamic Latency Adjustment: \", aggregateLatency)\n      \n          this.setState({\n            playState: \"Play\",\n            playTime: vid.currentTime\n          }, ()=> { \n            // alert(this.state.playTime)\n            socket.emit('subscribeToTimer', \"Play\", this.state.playTime)\n          })\n  }\n\n  pauseVid=()=>{\n    let vid = document.getElementById(\"myVideo\"); \n    vid.ontimeupdate = function() {\n      document.getElementById(\"demo\").innerHTML = vid.currentTime;\n      //console.log(vid.currentTime)\n    };\n    this.setState({\n      playState: \"Pause\",\n      playTime: vid.currentTime\n    }, ()=> {\n      socket.emit('subscribeToTimer', \"Pause\", this.state.playTime)\n     })\n  }\n\n\nplayAsync=()=>{  \n    let vid = document.getElementById(\"myVideo\"); \n    this.setState({\n      playState: \"Play\",\n    })\n    vid.ontimeupdate = function() {\n      \n      document.getElementById(\"demo\").innerHTML = vid.currentTime;\n      vid.play()\n    };\n}\n\npauseAsync=()=>{\n  let vid = document.getElementById(\"myVideo\"); \n  vid.ontimeupdate = function() {\n    document.getElementById(\"demo\").innerHTML = vid.currentTime;\n    vid.pause()\n  };\n  this.setState({\n    playState: \"Pause\",\n    curPlayTime: vid.currentTime,\n})\n}\n\n  updatePlayhead=()=>{\n      let that = this\n      let vid = document.getElementById(\"myVideo\");\n      if(this.state.playState===\"Pause\" && this.state.syncMode && this.state.curPlayTime !== vid.currentTime){  \n          console.log(\"update\", vid.currentTime);\n          that.setState({\n            playTime: vid.currentTime\n          }, ()=> {\n            console.log(\"madeit\", that.state.playTime)\n            socket.emit('subscribeToTimer', \"Pause\", that.state.playTime)\n           })\n        };\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"videoSycnWrapper\">\n          {this.state.enterViewing === false ?\n          <div className=\"bg\">\n            <button className=\"enter\" onClick={this.enterViewing}>Enter Viewing</button>\n          </div>:<span> </span>\n          }\n         <h1>Synchronized Video Viewing</h1>\n         <div>\n           Active Viewers: {numClients}\n        </div>\n         <div className=\"videoWrapper\">\n          <video id=\"myVideo\" height=\"300px\" onTimeUpdate={this.updatePlayhead} src={this.state.videosrc} seeking=\"true\" controls preload=\"auto\"></video>\n         </div>\n         {this.state.syncMode === true ? \n         <div>\n           {this.state.playState===\"Pause\" ?\n            <button className=\"player-controls-btns\" onClick={this.playVid}>Play</button>: <button className=\"player-controls-btns\" id=\"SyncPause\" onClick={this.pauseVid}>Pause</button>\n          }\n         </div>:<span></span>\n        }\n\n        {this.state.syncMode === false ? \n        <div>\n          {this.state.playState===\"Pause\" ?\n          <button className=\"player-controls-btns\" onClick={this.playAsync}>Play</button>:<button className=\"player-controls-btns\" onClick={this.pauseAsync}>Pause</button>\n          }\n        </div>:<span></span>\n        }\n\n        <span>\n          Synchronize Playback:\n        </span>\n        <Switch onChange={this.toggleSyncMode} checked={this.state.syncMode} onColor=\"#6264a7\" checkedIcon/>\n{/* <Switch onChange={this.toggleSyncMode} checked={this.state.toggleSyncMode} /> */}\n\n        \n \n  \n        <p>Client Video Timecode: <span id=\"demo\"></span></p>\n\n        <div className=\"block\">\n        Server Timecode: {this.state.curPlayTime}\n        </div>\n        <div className=\"block\">\n        Server Playstate: {this.state.playState}\n        </div>\n\n        <div className=\"block\">\n           Client UUID: {this.state.uuid}\n        </div>\n\n        <div className=\"block\" >\n          Dynamic Latency Control (WIP) <Switch onChange={this.handleLatencyChange} checked={this.state.checked} />\n        </div>\n        \n        <div className=\"block\">\n          Latency Sync Adjustment: {aggregateLatency}\n        </div>\n\n   \n        \n        {/* latencyTest: {this.state.latencyTest} */}\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport io from 'socket.io-client'\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}