{"version":3,"sources":["Video/video.mp4","api.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","socket","openSocket","uuidv1","require","numClients","aggregateLatency","App","props","_this","cb","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","initSocket","io","on","console","log","getClientLatency","latencyValues","uid","state","uuid","latencyObj","values","length","highestLatency","Math","max","apply","toConsumableArray","playVid","vid","document","getElementById","ontimeupdate","innerHTML","currentTime","setState","playState","playTime","emit","pauseVid","playAsync","play","pauseAsync","pause","curPlayTime","updatePlayhead","that","assertThisInitialized","playMode","latencyDelay","checked","videosrc","time","timer","timerFunc","handleLatencyChange","bind","playFunc","subscribeToTimer","curPlayState","_this2","setInterval","Date","getTime","setTimeout","react_default","a","createElement","className","id","height","onTimeUpdate","src","seeking","controls","preload","onClick","react_switch_default","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cdca9138.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/video.b220a35d.mp4\";","import openSocket from 'socket.io-client';\n// const  socket = openSocket('https://shielded-sea-84002.herokuapp.com');\nconst  socket = openSocket('http://localhost:8000');\nfunction subscribeToTimer(cb) {\n  socket.on('playController', playFunc => cb(playFunc));\n  // socket.emit('subscribeToTimer', \"Inital\", \"Hello\")\n}\n\nfunction timer(cb) {\n  socket.on('setTimer', timerFunc => cb(timerFunc));\n  // socket.emit('subscribeToTimer', \"Inital\", 0)\n}\n\n\nexport {subscribeToTimer, timer};","import React, { Component } from 'react';\nimport './App.css';\nimport { subscribeToTimer, timer } from './api';\nimport {video} from \"./Video/video.mp4\"\nimport { Socket } from 'dgram';\nimport Switch from \"react-switch\";\nimport io from 'socket.io-client'\nimport openSocket from 'socket.io-client';\nconst uuidv1 = require('uuid/v1');\nlet numClients=1;\nconst  socket = openSocket('http://localhost:8000');\n// const  socket = openSocket('https://shielded-sea-84002.herokuapp.com');\n// const  socket = \"/\"\nlet aggregateLatency=0; \nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playTime: 10,\n      playMode: \"sync\",\n      latencyObj: {},\n      curPlayTime: 0,\n      latencyDelay: 0,\n      checked: false,\n      videosrc: \"https://firebasestorage.googleapis.com/v0/b/elevaetbackend.appspot.com/o/Test%2FMSF19087_Workplace_Vertilcals_YIR_v05.mp4?alt=media&token=5d72233a-ca4f-41d2-a692-118f845ae743\"\n    };\n    timer((time) => \n    this.setState({ \n      timer: time,\n    }));\n    this.handleLatencyChange = this.handleLatencyChange.bind(this);\n    subscribeToTimer((playState) => \n    this.setState({ \n      playState: playState.curPlayState,\n      curPlayTime: playState.curPlayTime,\n      latencyObj: playState.latencyObj\n    }));\n  }\n\n  componentWillMount(){\n    this.setState({uuid: uuidv1()})\n    // socket.emit('subscribeToTimer', \"sdfasdf\", this.state.curPlayTime)\n    this.initSocket()\n    \n    setInterval(() => {\n      this.getClientLatency()\n    }, 2000);\n  }\n\n  initSocket=()=>{\n    const socket = io(socket)\n    socket.on('connect', () => {\n      console.log('connected')\n      // socket.emit('subscribeToTimer', \"Play\", this.state.playTime)\n      // setInterval(() => {\n      //   socket.emit('timer', new Date().getTime(), this.state.uuid)\n      // }, 2000);\n    })\n  }\n\n  \n\n\n  componentDidUpdate() {\n   \n    let vid = document.getElementById(\"myVideo\");\n    if(this.state.playState===\"Play\"){\n      socket.emit('timer', new Date().getTime(), this.state.uuid)\n      if(this.state.checked){\n        setTimeout(()=>{\n          vid.play();\n        },aggregateLatency)\n      }else{\n        vid.play();\n      }\n        \n    }else{\n      socket.emit('timer', new Date().getTime(), this.state.uuid)\n      vid.pause()\n    }\n    vid.currentTime=this.state.curPlayTime\n  }\n\n  handleLatencyChange(checked) {\n    this.setState({ checked });\n  }\n\ngetClientLatency=()=>{\n    let latencyValues={}\n    let uid= this.state.uuid\n    let latencyObj= this.state.latencyObj\n    if(latencyObj !== {}){\n      latencyValues=Object.values(latencyObj)\n      numClients=latencyValues.length\n      let highestLatency=Math.max(...latencyValues)\n      \n      console.log(latencyValues)\n      // console.log(highestLatency)\n      if(latencyObj[uid]>0){\n        aggregateLatency= highestLatency-latencyObj[uid]\n      }else{\n        aggregateLatency= 0\n      }\n      \n      //if(aggregateLatency<2){\n        //console.log(\"aggregatedLatency\", aggregateLatency)\n      // this.setState({latencyDelay: aggregateLatency})\n      //}\n      \n    }\n  }\n\n  playVid=()=>{\n     \n      //console.log(\"called\")\n      //this.setState({playState: \"Play\"})\n      let vid = document.getElementById(\"myVideo\"); \n      vid.ontimeupdate = function() {\n        document.getElementById(\"demo\").innerHTML = vid.currentTime;\n        //console.log(vid.currentTime)\n      };\n      \n        console.log(\"Dynamic Latency Adjustment: \", aggregateLatency)\n      \n          this.setState({\n            playState: \"Play\",\n            playTime: vid.currentTime\n          }, ()=> { \n            // alert(this.state.playTime)\n            socket.emit('subscribeToTimer', \"Play\", this.state.playTime)\n          })\n\n      \n  }\n\n  pauseVid=()=>{\n    let vid = document.getElementById(\"myVideo\"); \n    \n    vid.ontimeupdate = function() {\n      document.getElementById(\"demo\").innerHTML = vid.currentTime;\n      //console.log(vid.currentTime)\n    };\n    this.setState({\n      playState: \"Pause\",\n      playTime: vid.currentTime\n    }, ()=> {\n      this.getClientLatency()\n      socket.emit('subscribeToTimer', \"Pause\", this.state.playTime)\n     })\n  }\n\n\nplayAsync=()=>{  \n    let vid = document.getElementById(\"myVideo\"); \n    this.setState({\n      playState: \"Play\",\n    })\n    vid.ontimeupdate = function() {\n      \n      document.getElementById(\"demo\").innerHTML = vid.currentTime;\n      vid.play()\n    };\n}\n\npauseAsync=()=>{\n  let vid = document.getElementById(\"myVideo\"); \n  vid.ontimeupdate = function() {\n    document.getElementById(\"demo\").innerHTML = vid.currentTime;\n    vid.pause()\n  };\n  this.setState({\n    playState: \"Pause\",\n    curPlayTime: vid.currentTime,\n})\n}\n\n  updatePlayhead=()=>{\n      let that = this\n      let vid = document.getElementById(\"myVideo\");\n      if(this.state.playState===\"Pause\" && this.state.playMode===\"sync\" && this.state.curPlayTime !== vid.currentTime){  \n          console.log(\"update\", vid.currentTime);\n          that.setState({\n            playTime: vid.currentTime\n          }, ()=> {\n            console.log(\"madeit\", this.state.playTime)\n            socket.emit('subscribeToTimer', \"Pause\", that.state.playTime)\n           })\n        };\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"videoSycnWrapper\">\n         <h1>Synchronized Video Viewing</h1>\n         <div className=\"block\">\n           Currently Viewing: {numClients}\n        </div>\n         <div className=\"videoWrapper\">\n          <video id=\"myVideo\" height=\"300px\" onTimeUpdate={this.updatePlayhead} src={this.state.videosrc} seeking=\"true\"controls preload=\"auto\"></video>\n         </div>\n        <button onClick={this.playVid}>Sync Play</button>\n        <button id=\"SyncPause\" onClick={this.pauseVid}>Sync Pause</button>\n        <button onClick={this.playAsync}>Async Play</button>\n        <button onClick={this.pauseAsync}>Async Pause</button>\n\n        <p>Client Video Timecode: <span id=\"demo\"></span></p>\n     \n        \n\n        <div className=\"block\" >\n          Dynamic Latency Control (WIP) <Switch onChange={this.handleLatencyChange} checked={this.state.checked} />\n        </div>\n       \n        <div className=\"block\">\n           UUID: {this.state.uuid}\n        </div>\n        \n        <div className=\"block\">\n          Aggregated Latency: {aggregateLatency}\n        </div>\n\n        <div className=\"block\">\n        From sever curPlayTime: {this.state.curPlayTime}\n        </div>\n        <div className=\"block\">\n        From sever PlayState: {this.state.playState}\n        </div>\n        \n        {/* latencyTest: {this.state.latencyTest} */}\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport io from 'socket.io-client'\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}