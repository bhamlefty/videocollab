{"version":3,"sources":["Video/video.mp4","api.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","socket","openSocket","App","props","_this","cb","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","playVid","console","log","setState","playState","vid","document","getElementById","ontimeupdate","innerHTML","currentTime","playTime","emit","state","pauseVid","playAsync","play","pauseAsync","pause","curPlayTime","updatePlayhead","that","assertThisInitialized","playMode","message","playFunc","videosrc","curPlayState","on","react_default","a","createElement","className","id","height","onTimeUpdate","src","seeking","controls","preload","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dc0c961d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/video.b220a35d.mp4\";","import openSocket from 'socket.io-client';\nconst  socket = openSocket('http://localhost:8000');\nfunction subscribeToTimer(cb) {\n  socket.on('playController', playFunc => cb(playFunc));\n  // socket.emit('subscribeToTimer', \"Inital\", \"Hello\")\n}\n\n\nexport { subscribeToTimer};","\nimport React, { Component } from 'react';\nimport './App.css';\nimport { subscribeToTimer } from './api';\nimport {video} from \"./Video/video.mp4\"\nimport { Socket } from 'dgram';\nimport io from 'socket.io-client'\nimport openSocket from 'socket.io-client';\nconst  socket = openSocket('http://shielded-sea-84002.herokuapp.com:80');\n// const  socket = \"/\"\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playTime: 10,\n      playMode: \"sync\",\n      message: \"\",\n      playFunc: \"test\",\n      curPlayTime: 0,\n      videosrc: \"https://www.youtube.com/watch?v=Raf9bVk75s8\"\n    };\n    subscribeToTimer((playState) => \n    \n    this.setState({ \n      playState: playState.curPlayState,\n      curPlayTime: playState.curPlayTime\n    }));\n  }\n\n\n  componentDidUpdate() {\n    if(this.state.playState===\"Play\"){\n      let vid = document.getElementById(\"myVideo\"); \n      vid.play()\n    }else{\n      let vid = document.getElementById(\"myVideo\"); \n      vid.pause()\n    }\n    let vid = document.getElementById(\"myVideo\"); \n    vid.currentTime=this.state.curPlayTime\n  }\n\n\n  playVid=()=>{\n      console.log(\"called\")\n      this.setState({playState: \"Play\"})\n      let vid = document.getElementById(\"myVideo\"); \n      vid.ontimeupdate = function() {\n        document.getElementById(\"demo\").innerHTML = vid.currentTime;\n        //console.log(vid.currentTime)\n      };\n      this.setState({\n        playState: \"Play\",\n        playTime: vid.currentTime\n      }, ()=> {\n        // alert(this.state.playTime)\n        socket.emit('subscribeToTimer', \"Play\", this.state.playTime)\n       })\n      // socket.emit('subscribeToTimer', \"Play\", this.state.playTime) \n  }\n\n  pauseVid=()=>{\n    let vid = document.getElementById(\"myVideo\"); \n    \n    vid.ontimeupdate = function() {\n      document.getElementById(\"demo\").innerHTML = vid.currentTime;\n      console.log(vid.currentTime)\n    };\n    this.setState({\n      playState: \"Pause\",\n      playTime: vid.currentTime\n    }, ()=> {\n      // alert(this.state.playTime)\n      socket.emit('subscribeToTimer', \"Pause\", this.state.playTime)\n     })\n  }\n\n\nplayAsync=()=>{\n      \n    let vid = document.getElementById(\"myVideo\"); \n    this.setState({\n      playState: \"Play\",\n    })\n    vid.ontimeupdate = function() {\n      document.getElementById(\"demo\").innerHTML = vid.currentTime;\n      vid.play()\n    };\n}\n\npauseAsync=()=>{\n\n  let vid = document.getElementById(\"myVideo\"); \n  vid.ontimeupdate = function() {\n    document.getElementById(\"demo\").innerHTML = vid.currentTime;\n    vid.pause()\n  };\n  this.setState({\n    playState: \"Pause\",\n    curPlayTime: vid.currentTime,\n})\n}\n\n  updatePlayhead=()=>{\n      let that = this\n      let vid = document.getElementById(\"myVideo\");\n      if(this.state.playState===\"Pause\" && this.state.playMode===\"sync\" && this.state.curPlayTime !== vid.currentTime){  \n          console.log(\"update\", vid.currentTime);\n          that.setState({\n            playTime: vid.currentTime\n          }, ()=> {\n            console.log(\"madeit\", this.state.playTime)\n            socket.emit('subscribeToTimer', \"Pause\", that.state.playTime)\n           })\n        };\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"videoSycnWrapper\">\n         <h1>High framerate video collaboration prototype</h1>\n         <div className=\"videoWrapper\">\n          <video id=\"myVideo\" height=\"300px\" onTimeUpdate={this.updatePlayhead} src=\"https://media.w3.org/2010/05/sintel/trailer_hd.mp4\" seeking=\"true\"controls preload></video>\n         </div>\n       \n        Play State: {this.state.playState}\n        \n        <button onClick={this.playVid}>Sync Play</button>\n        <button onClick={this.pauseVid}>Sycn Pause</button>\n        <button onClick={this.playAsync}>Async Play</button>\n        <button onClick={this.pauseAsync}>Async Pause</button>\n        <p>Client Video Timecode: <span id=\"demo\"></span></p>\n        From sever PlayState: {this.state.playState}\n        From sever curPlayTime: {this.state.curPlayTime}\n      </div>\n    );\n  }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport io from 'socket.io-client'\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}