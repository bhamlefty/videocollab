{"version":3,"sources":["Video/video.mp4","api.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","socket","openSocket","uuidv1","require","numClients","aggregateLatency","App","props","_this","cb","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","initSocket","io","on","console","log","setInterval","emit","Date","getTime","state","uuid","checkpass","updatePass","event","target","value","pass","setState","enterViewing","updateVidSRC","src","videosrc","curPass","getClientLatency","latencyValues","uid","latencyObj","values","length","highestLatency","Math","max","apply","toConsumableArray","playVid","vid","document","getElementById","ontimeupdate","innerHTML","currentTime","playState","playTime","pauseVid","playAsync","play","pauseAsync","pause","curPlayTime","updatePlayhead","that","assertThisInitialized","syncMode","latencyDelay","checked","time","timer","timerFunc","handleLatencyChange","bind","toggleSyncMode","playFunc","subscribeToTimer","curPlayState","setTimeout","_this2","react_default","a","createElement","className","type","placeholder","onChange","id","height","onTimeUpdate","seeking","controls","preload","onClick","react_switch_default","onColor","checkedIcon","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6KAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sMCCjCC,EAASC,IAAW,yECOrBC,EAASC,EAAQ,IACnBC,EAAW,EAERJ,EAASC,IAAW,wCAEvBI,EAAiB,EAwRNC,cAtRb,SAAAA,EAAYC,GAAO,IAAAC,EDPNC,ECOM,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACjBE,EAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAML,KAmCRS,WAAW,WACT,IAAMhB,EAASiB,IAAGjB,GAClBA,EAAOkB,GAAG,UAAW,WACnBC,QAAQC,IAAI,aAEZC,YAAY,WACVrB,EAAOsB,KAAK,SAAS,IAAIC,MAAOC,UAAWhB,EAAKiB,MAAMC,OACrD,QA3CYlB,EA+CnBmB,UAAU,aA/CSnB,EAmDnBoB,WAAW,SAACC,GACPA,EAAMC,OAAOC,QAAQvB,EAAKiB,MAAMO,MACjCxB,EAAKyB,SAAS,CACZC,cAAc,KAtDD1B,EA2DnB2B,aAAa,SAACC,GACZ5B,EAAKyB,SAAS,CAACI,SAAUD,KA5DR5B,EAgGnB0B,aAAa,WACR1B,EAAKiB,MAAMa,UAAU9B,EAAKiB,MAAMO,MACjCxB,EAAKyB,SAAS,CACZC,cAAc,KAnGD1B,EAwGrB+B,iBAAiB,WACb,IAAIC,EAAc,GACdC,EAAKjC,EAAKiB,MAAMC,KAChBgB,EAAYlC,EAAKiB,MAAMiB,WAC3B,GAAGA,IAAe,GAAG,CACnBF,EAAc9B,OAAOiC,OAAOD,GAC5BtC,EAAWoC,EAAcI,OACzB,IAAIC,EAAeC,KAAKC,IAALC,MAAAF,KAAIpC,OAAAuC,EAAA,EAAAvC,CAAQ8B,IAE/BrB,QAAQC,IAAIoB,GAIVnC,EADCqC,EAAWD,GAAK,EACCI,EAAeH,EAAWD,GAE1B,IAvHLjC,EA6HnB0C,QAAQ,WAEJ1C,EAAK+B,mBAEL,IAAIY,EAAMC,SAASC,eAAe,WAClCF,EAAIG,aAAe,WACjBF,SAASC,eAAe,QAAQE,UAAYJ,EAAIK,aAIhDrC,QAAQC,IAAI,+BAAgCf,GAE1CG,EAAKyB,SAAS,CACZwB,UAAW,OACXC,SAAUP,EAAIK,aACb,WAEDxD,EAAOsB,KAAK,mBAAoB,OAAQd,EAAKiB,MAAMiC,aA9I1ClD,EAkJnBmD,SAAS,WACP,IAAIR,EAAMC,SAASC,eAAe,WAClCF,EAAIG,aAAe,WACjBF,SAASC,eAAe,QAAQE,UAAYJ,EAAIK,aAGlDhD,EAAKyB,SAAS,CACZwB,UAAW,QACXC,SAAUP,EAAIK,aACb,WACDxD,EAAOsB,KAAK,mBAAoB,QAASd,EAAKiB,MAAMiC,aA5JrClD,EAiKrBoD,UAAU,WACN,IAAIT,EAAMC,SAASC,eAAe,WAClC7C,EAAKyB,SAAS,CACZwB,UAAW,SAEbN,EAAIG,aAAe,WAEjBF,SAASC,eAAe,QAAQE,UAAYJ,EAAIK,YAChDL,EAAIU,SAzKWrD,EA6KrBsD,WAAW,WACT,IAAIX,EAAMC,SAASC,eAAe,WAClCF,EAAIG,aAAe,WACjBF,SAASC,eAAe,QAAQE,UAAYJ,EAAIK,YAChDL,EAAIY,SAENvD,EAAKyB,SAAS,CACZwB,UAAW,QACXO,YAAab,EAAIK,eArLAhD,EAyLnByD,eAAe,WACX,IAAIC,EAAIxD,OAAAyD,EAAA,EAAAzD,CAAAF,GACJ2C,EAAMC,SAASC,eAAe,WACR,UAAvB7C,EAAKiB,MAAMgC,WAAuBjD,EAAKiB,MAAM2C,UAAY5D,EAAKiB,MAAMuC,cAAgBb,EAAIK,cACvFrC,QAAQC,IAAI,SAAU+B,EAAIK,aAC1BU,EAAKjC,SAAS,CACZyB,SAAUP,EAAIK,aACb,WACDrC,QAAQC,IAAI,SAAU8C,EAAKzC,MAAMiC,UACjC1D,EAAOsB,KAAK,mBAAoB,QAAS4C,EAAKzC,MAAMiC,cAhM5DlD,EAAKiB,MAAQ,CACXiC,SAAU,GACVU,UAAU,EACVX,UAAW,QACXf,WAAY,GACZsB,YAAa,EACbK,aAAc,EACdnC,cAAc,EACdI,QAAS,GACTN,KAAM,UACNsC,SAAS,EACTjC,SAAU,iKDpBD5B,ECsBL,SAAC8D,GAAD,OACN/D,EAAKyB,SAAS,CACZuC,MAAOD,KDvBXvE,EAAOkB,GAAG,WAAY,SAAAuD,GAAS,OAAIhE,EAAGgE,KCyBpCjE,EAAKkE,oBAAsBlE,EAAKkE,oBAAoBC,KAAzBjE,OAAAyD,EAAA,EAAAzD,CAAAF,IAC3BA,EAAKoE,eAAiBpE,EAAKoE,eAAeD,KAApBjE,OAAAyD,EAAA,EAAAzD,CAAAF,IDhC1B,SAA0BC,GACxBT,EAAOkB,GAAG,iBAAkB,SAAA2D,GAAQ,OAAIpE,EAAGoE,KCgCzCC,CAAiB,SAACrB,GAAD,OACjBjD,EAAKyB,SAAS,CACZwB,UAAWA,EAAUsB,aACrBf,YAAaP,EAAUO,YACvBtB,WAAYe,EAAUf,eAzBPlC,oFA8BjBI,KAAKqB,SAAS,CAACP,KAAMxB,MAErBU,KAAKI,0DAmCL,IAAImC,EAAMC,SAASC,eAAe,WACR,SAAvBzC,KAAKa,MAAMgC,WACZzD,EAAOsB,KAAK,SAAS,IAAIC,MAAOC,UAAWZ,KAAKa,MAAMC,MACnDd,KAAKa,MAAM6C,QACZU,WAAW,WACT7B,EAAIU,QACJxD,GAEF8C,EAAIU,SAIN7D,EAAOsB,KAAK,SAAS,IAAIC,MAAOC,UAAWZ,KAAKa,MAAMC,MACtDyB,EAAIY,SAENZ,EAAIK,YAAY5C,KAAKa,MAAMuC,wDAGTM,GAClB1D,KAAKqB,SAAS,CAAEqC,qDAIhBnD,QAAQC,IAAI,kBACZR,KAAKqB,SAAS,CACZmC,UAAWxD,KAAKa,MAAM2C,4CA6GjB,IAAAa,EAAArE,KACP,OACEsE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACkB,IAA5BzE,KAAKa,MAAMS,aACZgD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACZH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YAAYC,KAAK,WAAWC,YAAY,iBAAiBC,SAAU5E,KAAKgB,cAErFsD,EAAAC,EAAAC,cAAA,iBAERF,EAAAC,EAAAC,cAAA,wCACAF,EAAAC,EAAAC,cAAA,8BACmBhF,GAEnB8E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACdH,EAAAC,EAAAC,cAAA,SAAOK,GAAG,UAAUC,OAAO,QAAQC,aAAc/E,KAAKqD,eAAgB7B,IAAKxB,KAAKa,MAAMY,SAAUuD,QAAQ,OAAOC,UAAQ,EAACC,QAAQ,UAEjIZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACZH,EAAAC,EAAAC,cAAA,UAAQW,QAAS,WAAKd,EAAK9C,aAAa,mKAAxC,WACA+C,EAAAC,EAAAC,cAAA,UAAQW,QAAS,WAAKd,EAAK9C,aAAa,oKAAxC,YACA+C,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,2BAEsB,IAAxBxE,KAAKa,MAAM2C,SACZc,EAAAC,EAAAC,cAAA,WAC0B,UAAvBxE,KAAKa,MAAMgC,UACXyB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBU,QAASnF,KAAKsC,SAAvD,QAA+EgC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBI,GAAG,YAAYM,QAASnF,KAAK+C,UAAtE,UAE3EuB,EAAAC,EAAAC,cAAA,cAGiB,IAAxBxE,KAAKa,MAAM2C,SACZc,EAAAC,EAAAC,cAAA,WAC0B,UAAvBxE,KAAKa,MAAMgC,UACZyB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBU,QAASnF,KAAKgD,WAAvD,QAAgFsB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBU,QAASnF,KAAKkD,YAAvD,UAE3EoB,EAAAC,EAAAC,cAAA,aAGPF,EAAAC,EAAAC,cAAA,qCAGAF,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CAAQK,SAAU5E,KAAKgE,eAAgBN,QAAS1D,KAAKa,MAAM2C,SAAU6B,QAAQ,UAAUC,aAAW,IAMlGhB,EAAAC,EAAAC,cAAA,mCAA0BF,EAAAC,EAAAC,cAAA,QAAMK,GAAG,UAEnCP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,oBACkBzE,KAAKa,MAAMuC,aAE7BkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,qBACmBzE,KAAKa,MAAMgC,WAG9ByB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,gBACiBzE,KAAKa,MAAMC,MAG5BwD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,iCACgCH,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CAAQK,SAAU5E,KAAK8D,oBAAqBJ,QAAS1D,KAAKa,MAAM6C,WAGhGY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,4BAC4BhF,WA3QlB8F,aCFEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASvD,SAASC,eAAe,SDyH3C,kBAAmBuD,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.31afe308.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/video.b220a35d.mp4\";","import openSocket from 'socket.io-client';\nconst  socket = openSocket('https://syncprototype.herokuapp.com/');\n// const  socket = openSocket('http://localhost:8000');\nfunction subscribeToTimer(cb) {\n  socket.on('playController', playFunc => cb(playFunc));\n  // socket.emit('subscribeToTimer', \"Inital\", \"Hello\")\n}\n\nfunction timer(cb) {\n  socket.on('setTimer', timerFunc => cb(timerFunc));\n  // socket.emit('subscribeToTimer', \"Inital\", 0)\n}\n\n\nexport {subscribeToTimer, timer};","import React, { Component } from 'react';\nimport './App.css';\nimport { subscribeToTimer, timer } from './api';\nimport {video} from \"./Video/video.mp4\"\nimport { Socket } from 'dgram';\nimport Switch from \"react-switch\";\nimport io from 'socket.io-client'\nimport openSocket from 'socket.io-client';\nconst uuidv1 = require('uuid/v1');\nlet numClients=1;\n// const  socket = openSocket('http://localhost:8000');\nconst  socket = openSocket('https://syncprototype.herokuapp.com/');\n// const  socket = \"/\"\nlet aggregateLatency=0; \nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playTime: 10,\n      syncMode: true,\n      playState: \"Pause\",\n      latencyObj: {},\n      curPlayTime: 0,\n      latencyDelay: 0,\n      enterViewing: false,\n      curPass: \"\",\n      pass: \"BOD4945\",\n      checked: false,\n      videosrc: \"https://firebasestorage.googleapis.com/v0/b/elevaetbackend.appspot.com/o/Test%2FTeams_Calling_BOD_V7.mp4?alt=media&token=6128a443-ca9b-49e6-a2b1-3bdbbc0b75db\"\n    };\n    timer((time) => \n    this.setState({ \n      timer: time,\n    }));\n    this.handleLatencyChange = this.handleLatencyChange.bind(this);\n    this.toggleSyncMode = this.toggleSyncMode.bind(this);\n    subscribeToTimer((playState) => \n    this.setState({ \n      playState: playState.curPlayState,\n      curPlayTime: playState.curPlayTime,\n      latencyObj: playState.latencyObj\n    }));\n  }\n\n  componentWillMount(){\n    this.setState({uuid: uuidv1()})\n    // socket.emit('subscribeToTimer', \"sdfasdf\", this.state.curPlayTime)\n    this.initSocket()\n    \n  }\n\n  initSocket=()=>{\n    const socket = io(socket)\n    socket.on('connect', () => {\n      console.log('connected')\n      // socket.emit('subscribeToTimer', \"Play\", this.state.playTime)\n      setInterval(() => {\n        socket.emit('timer', new Date().getTime(), this.state.uuid)\n      }, 2000);\n    })\n  }\n\n  checkpass=()=>{\n\n  }\n\n  updatePass=(event)=>{\n    if(event.target.value===this.state.pass){\n      this.setState({ \n        enterViewing: true\n       });\n    }\n  }\n\n  updateVidSRC=(src)=>{\n    this.setState({videosrc: src})\n  }\n  \n\n\n  componentDidUpdate() {\n   \n    let vid = document.getElementById(\"myVideo\");\n    if(this.state.playState===\"Play\"){\n      socket.emit('timer', new Date().getTime(), this.state.uuid)\n      if(this.state.checked){\n        setTimeout(()=>{\n          vid.play();\n        },aggregateLatency)\n      }else{\n        vid.play();\n      }\n        \n    }else{\n      socket.emit('timer', new Date().getTime(), this.state.uuid)\n      vid.pause()\n    }\n    vid.currentTime=this.state.curPlayTime\n  }\n\n  handleLatencyChange(checked) {\n    this.setState({ checked });\n  }\n\n  toggleSyncMode() {\n    console.log(\"toggleSyncMode\")\n    this.setState({ \n      syncMode: !this.state.syncMode\n     });\n  }\n\n  enterViewing=()=>{\n    if(this.state.curPass===this.state.pass){\n      this.setState({ \n        enterViewing: true\n       });\n    }\n  }\n\ngetClientLatency=()=>{\n    let latencyValues={}\n    let uid= this.state.uuid\n    let latencyObj= this.state.latencyObj\n    if(latencyObj !== {}){\n      latencyValues=Object.values(latencyObj)\n      numClients=latencyValues.length\n      let highestLatency=Math.max(...latencyValues)\n      \n      console.log(latencyValues)\n      // console.log(highestLatency)\n\n      if(latencyObj[uid]>0){\n        aggregateLatency= highestLatency-latencyObj[uid]\n      }else{\n        aggregateLatency= 0\n      }\n      \n    }\n  }\n\n  playVid=()=>{  \n      //console.log(\"called\")\n      this.getClientLatency()\n      //this.setState({playState: \"Play\"})\n      let vid = document.getElementById(\"myVideo\"); \n      vid.ontimeupdate = function() {\n        document.getElementById(\"demo\").innerHTML = vid.currentTime;\n        //console.log(vid.currentTime)\n      };\n      \n        console.log(\"Dynamic Latency Adjustment: \", aggregateLatency)\n      \n          this.setState({\n            playState: \"Play\",\n            playTime: vid.currentTime\n          }, ()=> { \n            // alert(this.state.playTime)\n            socket.emit('subscribeToTimer', \"Play\", this.state.playTime)\n          })\n  }\n\n  pauseVid=()=>{\n    let vid = document.getElementById(\"myVideo\"); \n    vid.ontimeupdate = function() {\n      document.getElementById(\"demo\").innerHTML = vid.currentTime;\n      //console.log(vid.currentTime)\n    };\n    this.setState({\n      playState: \"Pause\",\n      playTime: vid.currentTime\n    }, ()=> {\n      socket.emit('subscribeToTimer', \"Pause\", this.state.playTime)\n     })\n  }\n\n\nplayAsync=()=>{  \n    let vid = document.getElementById(\"myVideo\"); \n    this.setState({\n      playState: \"Play\",\n    })\n    vid.ontimeupdate = function() {\n      \n      document.getElementById(\"demo\").innerHTML = vid.currentTime;\n      vid.play()\n    };\n}\n\npauseAsync=()=>{\n  let vid = document.getElementById(\"myVideo\"); \n  vid.ontimeupdate = function() {\n    document.getElementById(\"demo\").innerHTML = vid.currentTime;\n    vid.pause()\n  };\n  this.setState({\n    playState: \"Pause\",\n    curPlayTime: vid.currentTime,\n})\n}\n\n  updatePlayhead=()=>{\n      let that = this\n      let vid = document.getElementById(\"myVideo\");\n      if(this.state.playState===\"Pause\" && this.state.syncMode && this.state.curPlayTime !== vid.currentTime){  \n          console.log(\"update\", vid.currentTime);\n          that.setState({\n            playTime: vid.currentTime\n          }, ()=> {\n            console.log(\"madeit\", that.state.playTime)\n            socket.emit('subscribeToTimer', \"Pause\", that.state.playTime)\n           })\n        };\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"videoSycnWrapper\">\n          {this.state.enterViewing === false ?\n          <div className=\"bg\">\n             <input className=\"enterPass\" type=\"password\" placeholder=\"Enter Password\" onChange={this.updatePass}></input>\n            {/* <button className=\"enter\" onClick={this.enterViewing}>Join</button> */}\n          </div>:<span> </span>\n          }\n         <h1>Synchronized Video Viewing</h1>\n         <div>\n           Active Viewers: {numClients}\n        </div>\n         <div className=\"videoWrapper\">\n          <video id=\"myVideo\" height=\"300px\" onTimeUpdate={this.updatePlayhead} src={this.state.videosrc} seeking=\"true\" controls preload=\"auto\"></video>\n         </div>\n         <div className=\"videoContainer\">\n            <button onClick={()=>{this.updateVidSRC(\"https://firebasestorage.googleapis.com/v0/b/elevaetbackend.appspot.com/o/Test%2FTeams_Calling_BOD_V7.mp4?alt=media&token=6128a443-ca9b-49e6-a2b1-3bdbbc0b75db\")}}>Calling</button>\n            <button onClick={()=>{this.updateVidSRC(\"https://firebasestorage.googleapis.com/v0/b/elevaetbackend.appspot.com/o/Test%2FTeams_Meetings_BOD_V6.mp4?alt=media&token=1c715048-a1a6-4460-87cf-144892e56bd3\")}}>Meetings</button>\n            <button>TFL</button>\n            <button>Devices</button>\n         </div>\n         {this.state.syncMode === true ? \n         <div>\n           {this.state.playState===\"Pause\" ?\n            <button className=\"player-controls-btns\" onClick={this.playVid}>Play</button>: <button className=\"player-controls-btns\" id=\"SyncPause\" onClick={this.pauseVid}>Pause</button>\n          }\n         </div>:<span></span>\n        }\n\n        {this.state.syncMode === false ? \n        <div>\n          {this.state.playState===\"Pause\" ?\n          <button className=\"player-controls-btns\" onClick={this.playAsync}>Play</button>:<button className=\"player-controls-btns\" onClick={this.pauseAsync}>Pause</button>\n          }\n        </div>:<span></span>\n        }\n\n        <span>\n          Synchronize Playback:\n        </span>\n        <Switch onChange={this.toggleSyncMode} checked={this.state.syncMode} onColor=\"#6264a7\" checkedIcon/>\n{/* <Switch onChange={this.toggleSyncMode} checked={this.state.toggleSyncMode} /> */}\n\n        \n \n  \n        <p>Client Video Timecode: <span id=\"demo\"></span></p>\n\n        <div className=\"block\">\n        Server Timecode: {this.state.curPlayTime}\n        </div>\n        <div className=\"block\">\n        Server Playstate: {this.state.playState}\n        </div>\n\n        <div className=\"block\">\n           Client UUID: {this.state.uuid}\n        </div>\n\n        <div className=\"block\" >\n          Dynamic Latency Control (WIP) <Switch onChange={this.handleLatencyChange} checked={this.state.checked} />\n        </div>\n        \n        <div className=\"block\">\n          Latency Sync Adjustment: {aggregateLatency}\n        </div>\n\n   \n        \n        {/* latencyTest: {this.state.latencyTest} */}\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport io from 'socket.io-client'\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}